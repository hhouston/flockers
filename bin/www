#!/usr/bin/env node
'use strict';
/**
 * Copyright Â© 2016 Austin Sigma. All rights reserved.
 */

let cluster = require('cluster');
let app = require('../app');
let debug = require('debug')('Auth:server');
let http = require('http');

/**
 * Listen on provided port, on all network interfaces.
 */
 if (process.env.NODE_ENV != 'test' && cluster.isMaster) {
    let totalWorkers = require('os').cpus().length-1;
    console.log('Running %d total workers', totalWorkers);
    for (let i = 0; i < totalWorkers; i++) {
      cluster.fork();
    }
    //respawn a worker on death.
    cluster.on('exit', function (worker) {
      console.log('Worker %d died', worker.id);
      cluster.fork();
    });
    return;
  }


  /**
   * Get port from environment and store in Express.
   */

  let port = normalizePort(process.env.PORT || '4000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  let server = http.createServer(app);

  /*var io = require('socket.io')(server);
    io.on('connection', function (socket) {
      socket.emit('news', { hello: 'world' });
      socket.on('my other event', function (data) {
        console.log(data);
      });
    });*/

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
